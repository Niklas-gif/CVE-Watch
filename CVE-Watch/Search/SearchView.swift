//
//  SearchView.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 04.12.23.
//

import SwiftUI



struct SearchView: View {
    @ObservedObject var vm = SearchVM()
    @State var searchText = ""
    @State var searchIsvisible = false
    @State var searchSetting = Searchtype.CVEid
    @State var navLinkVisible = false
    @State var placeholder = "CVE-ID example-> '2019-14287'"
    @State var hideToolbar = false
    @State var isHidden = false
    @State var startDate = Date()
    @State var endDate = Date()
    
    var body: some View {
        NavigationStack {
            ZStack {
                Color.cveBackground.ignoresSafeArea()
                VStack(alignment: .leading) {
                    if !hideToolbar {
                        Group {
                            SearchOptions(
                                searchSetting: $searchSetting,
                                placeholder: $placeholder)
                            .padding()
                            if searchSetting != .Date {
                                SearchField(vm: vm, searchText: $searchText,
                                            searchSetting: $searchSetting,
                                            placeholder: $placeholder)
                            } else {
                                DateRangePickerView(startDate: $startDate, endDate: $endDate,invalidDays: $vm.invalidDays)
                            }
                        }.onChange(of: vm.cves.count, {
                            if !hideToolbar && vm.cves.count > 0 {
                                withAnimation {
                                    hideToolbar.toggle()
                                }
                            }
                        })
                    }
                    if(vm.cves.count != 1) {
                        Text("Found: \(vm.cves.count) vulnerbalities")
                            .padding(.horizontal)
                    } else {
                        Text("Found: \(vm.cves.count) vulnerbalitie")
                            .padding(.horizontal)
                    }
                    if vm.isLoading {
                        HStack {
                            Spacer()
                            ProgressView().scaleEffect(3)
                            Spacer()
                        }
                    }
                    if vm.cves.count != 0 {
                        HStack {
                            Button(
                                action: {vm.storeCves()},
                                label: {Text("Save")})
                            Spacer()
                            Button(
                                action: {vm.toggleAll()},
                                label: {Text("Selected all")})
                        }.padding(.horizontal)
                        ZStack {
                            List {
                                ForEach(vm.cves) {data in
                                    SearchResultListItemView(data: data, vm: vm)
                                }
                            }
                            FloatingActionButton(
                                vm: vm,
                                userInput: $searchText,
                                searchtype: $searchSetting,
                                startDate:$startDate,
                                endDate:$endDate)
                        }
                    } else {
                        Spacer()
                        FloatingActionButton(
                            vm: vm,
                            userInput: $searchText,
                            searchtype: $searchSetting,
                            startDate:$startDate,
                            endDate:$endDate)
                    }
                    
                    
                }
                Spacer()
                
            }.onChange(of: $vm.cves.count, {
                if($vm.cves.count != 0) {
                    navLinkVisible = true
                }
            })
            .navigationTitle("Search")
            .navigationBarTitleDisplayMode(hideToolbar ? .inline : .large)
            .toolbar {
                ToolbarItem {
                    Button(
                        action: {
                            withAnimation {
                                hideToolbar.toggle()
                            }
                        },
                        label: {
                            Image(systemName: hideToolbar ? "eye.slash" : "eye")
                        }
                    )
                }
            }
        }
    }
}



struct SearchResultListItemView: View {
    var data : SearchResult
    var vm : SearchVM
    var body: some View {
        HStack {
            Text(data.cve.id)
            Spacer()
            Button(
                action: {
                    vm.toggle(id: data.id)
                },
                label: {
                    Image(systemName: data.isSelected ? "checkmark.circle" : "circle")
                        .symbolEffect(.bounce, value: data.isSelected)
                })
        }
    }
}

#Preview {
    SearchView()
}
