//
//  SearchView.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 04.12.23.
//

import SwiftUI



struct SearchView: View {
    @Environment(\.dismissSearch) private var dismissSearch
    @ObservedObject var vm = SearchVM()
    @State var searchText = ""
    @State var searchIsvisible = false
    @State var isSelected = false
    @State var searchSetting = Searchtype.CVEid
    @State var navLinkVisible = false
    @State var placeholder = "CVE-ID"
    
    var body: some View {
        NavigationStack {
            ZStack{
                Color.cveBackground.ignoresSafeArea()
                VStack(alignment: .leading) {
                    /*TextField(
                        "CVE-Search", text: $searchText
                    )
                    .textFieldStyle(.roundedBorder)
                    .padding()*/
                    SearchOptions(searchSetting: $searchSetting,placeholder: $placeholder).padding()
                    Text("Found: \(vm.cves.count) vulnerbalities")
                    if vm.cves.count != 0 {
                        List{
                            ForEach(vm.cves) {data in
                                HStack {
                                    Text(data.cve.id)
                                    Image(systemName: data.isSelected ? "checkmark.circle" : "circle")
                                        .symbolEffect(.bounce, value: data.isSelected)
                                }
                            }
                        }
                    }
                    if navLinkVisible {
                        NavigationLink(destination:CVEInfoView()) {
                            /*CVEDetailsView(displayData: $vm.displayData.first!)*/
                        }
                    }
                    FloatingActionButton(vm: vm, userInput: $searchText, searchtype: $searchSetting)
                    
                }
                Spacer()
               
            }.onChange(of: $vm.cves.count, {
                if($vm.cves.count != 0) {
                    navLinkVisible = true
                }
            })
            .navigationTitle("Search")
        }
        .searchable(text: $searchText, isPresented: $searchIsvisible,prompt: placeholder)
            .onSubmit(of:.search) {
            print(searchText)
            vm.fetch(userInput: searchText, searchtypte: searchSetting)
                
            }
            .onDisappear {
                dismissSearch()
                vm.cves = []
            }
    }
}

#Preview {
    SearchView()
}

struct SearchOptions: View {
    @Binding var searchSetting: Searchtype
    @Binding var placeholder : String
    var body: some View {
        ScrollView(.horizontal) {
            HStack(alignment: .center,spacing: 10) {
                Group {
                    Button(action: {
                        searchSetting = Searchtype.CVEid
                        placeholder = "CVE-ID"
                    }, label: {
                        HStack {
                            Text("ID")
                            
                            Image(systemName: "tray.circle")
                        }
                    }
                    ).foregroundStyle(searchSetting == .CVEid ? Color.accentColor : Color.white)
                    Button(action: {
                        searchSetting = Searchtype.Keyword
                        placeholder = "Keywords or Phrase"
                    }, label: {
                        HStack {
                            Text("Description")
                            
                            Image(systemName: "info.bubble")
                        }
                    }
                    ).foregroundStyle(searchSetting == .Keyword ? Color.accentColor : Color.white)
                    Button (action: {
                        searchSetting = Searchtype.Date
                        placeholder = "Date"
                    }, label: {
                        HStack {
                            Text("Date")
                            Image(systemName: "calendar")
                        }
                    }
                    ).foregroundStyle(searchSetting == .Date ? Color.accentColor : Color.white)
                }.padding(10).foregroundStyle(Color.white).fontWeight(.bold).background(Color.black).clipShape(.buttonBorder)
            }
        }
    }
}
