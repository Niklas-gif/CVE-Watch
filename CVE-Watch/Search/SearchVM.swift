//
//  SearchVM.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 16.01.24.
//

import Foundation

enum Searchtype {
    case Date
    case CVEid
    case Keyword
}

class SearchVM: ObservableObject {
    private let modelInterface = ModelInterface()
    private var cves: [Cve] = []
    @Published var searchResult: [Cve] = []
    //@Published var displayData: [DisplayMetric] = []
    
    func update() {
        cves = modelInterface.getCveData()
    }
    
    /*func cveDetailView() {
       displayData = MetricsHelper().handleMetricsVersion(metrics: .MetricsV31, cves: searchResult)
    }*/
    
    func fetch(userInput: String,searchtypte: Searchtype) {
        switch(searchtypte) {
        case .Date: print("Date")
        case .CVEid: fetchByID(userInput: userInput)
        case .Keyword: fetchByDesc(userInput: userInput)
        }
    }
    
     private func fetchByID(userInput: String) {
         if(userInput != "") {
             Task {
                 let fetch = await NetworkClerk().fetchByID(cveID: "CVE-" + userInput)
                 
                 DispatchQueue.main.async {
                     for vulnerability in fetch?.vulnerabilities ?? [] {
                         self.cves.append(vulnerability.cve)
                         self.storeCve(vulnerability: vulnerability)
                         //TODO: Check if cve alreafy exsists
                         self.modelInterface.save()
                         self.update()
                     }
                 }
             }
         }
    }
    
    private func fetchByDesc(userInput: String) {
        if(userInput != "") {
            Task {
                let fetch = await NetworkClerk().fetchByDescription(description: userInput)
                DispatchQueue.main.async {
                    for vulnerability in fetch?.vulnerabilities ?? [] {
                        self.storeCve(vulnerability: vulnerability)
                        //TODO: Check if cve alreafy exsists
                        self.modelInterface.save()
                        self.update()
                    }
                }
            }
        }
    }
    
    private func storeCve(vulnerability: Vulnerability) {
        self.searchResult.append(vulnerability.cve) //TODO: This needs testing!!!
        modelInterface.add(cve: vulnerability.cve)
        cves = modelInterface.getCveData()
        self.update()
     }
    
}
