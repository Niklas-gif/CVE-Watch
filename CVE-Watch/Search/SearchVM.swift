//
//  SearchVM.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 16.01.24.
//

import Foundation

enum Searchtype {
    case Date
    case CVEid
    case Keyword
}

class SearchVM: ObservableObject {
    private let modelInterface = ModelInterface()
    private var cves: [Cve] = []
    
    func update() {
        cves = modelInterface.getCveData()
    }
    
    func fetchByID(userInput: String) {
        Task {
            let fetch = await NetworkClerk().fetchByID(cveID: "CVE-" + userInput)
            DispatchQueue.main.async {
                for vulnerability in fetch?.vulnerabilities ?? [] {
                    self.storeCve(vulnerability: vulnerability)
                    //TODO: Check if cve alreafy exsists
                    self.modelInterface.save()
                    self.update()
                }
            }
        }
    }
    
    func searchByDesc(userInput: String) {
        Task {
            let fetch = await NetworkClerk().fetchByDescription(description: userInput)
            DispatchQueue.main.async {
                for vulnerability in fetch?.vulnerabilities ?? [] {
                    self.storeCve(vulnerability: vulnerability)
                    //TODO: Check if cve alreafy exsists
                    self.modelInterface.save()
                    self.update()
                }
            }
        }
    }
    
    private func storeCve(vulnerability: Vulnerability?) {
         if(vulnerability?.cve != nil) {
             modelInterface.add(cve: vulnerability!.cve)
             cves = modelInterface.getCveData()
             self.update()
         }
     }
    
}
