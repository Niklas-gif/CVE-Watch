//
//  MetricsHelper.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 14.12.23.
//

import Foundation

struct DisplayMetrics: Identifiable {
    let id = UUID()
    var cveID: String
    var version: String
    var description: String
    var vectorString: String
    var attackVector: String
    var attackComplexity: String
    var privilegesRequired: String
    var userInteraction: String
    var scope: String
    var confidentialityImpact: String
    var integrityImpact: String
    var availabilityImpact: String
    var baseScore: Double
    var baseSeverity: String
}

enum MetricsVersion: Int,Codable {
    case MetricsV2 = 1
    case MetricsV30 = 2
    case MetricsV31 = 3
}

/*func metricsHanlder(Cves: [Cve])->[DisplayMetrics]! {
//TODO:
    let displayMetrics: [DisplayMetrics]
    for cve in Cves {
        if cve.metrics?.cvssMetricV31 != nil {
            displayMetrics.append(DisplayMetrics(
                cveID: cve.id,
                version: (cve.metrics?.cvssMetricV31?.cvssData.version)!,
                description: <#T##String#>,
                vectorString: <#T##String#>,
                attackVector: <#T##String#>,
                attackComplexity: <#T##String#>,
                privilegesRequired: <#T##String#>,
                userInteraction: <#T##String#>,
                scope: <#T##String#>,
                confidentialityImpact: <#T##String#>,
                integrityImpact: <#T##String#>,
                availabilityImpact: <#T##String#>,
                baseScore: <#T##Double#>,
                baseSeverity: <#T##String#>))
        }
        if cve.metrics?.cvssMetricV30 != nil {
            
        }
        if cve.metrics?.cvssMetricV2 == nil {
            
        }
    }
    return nil
}*/
