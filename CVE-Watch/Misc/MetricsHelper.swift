//
//  MetricsHelper.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 14.12.23.
//

import Foundation

struct DisplayMetric: Identifiable {
    let id = UUID()
    var cveID: String?
    var version: String?
    var description: String?
    var vectorString: String?
    var attackVector: String?
    var attackComplexity: String?
    var privilegesRequired: String?
    var userInteraction: String?
    var scope: String?
    var confidentialityImpact: String?
    var integrityImpact: String?
    var availabilityImpact: String?
    var baseScore: Double?
    var baseSeverity: String?
    var exploitabilityScore: Double?
    var impactScore: Double?
}

enum MetricsVersion: Int,Codable,CaseIterable {
    case MetricsV2 = 1
    case MetricsV30 = 2
    case MetricsV31 = 3
}

class MetricsHelper {
    
    func handleMetricsVersion(cves:[Cve]) -> [DisplayMetric] {
        let metrics = UserSettings().metricsVersion
        var display: [DisplayMetric] = []
        for cve in cves {
            
            switch metrics {
            case .MetricsV2:
                if (cve.metrics?.cvssMetricV2 != nil) {
                    display.append(mapMetrics(cve: cve,metrics: metrics))
                    break
                }
            case .MetricsV30:
                if (cve.metrics?.cvssMetricV30 != nil) {
                    display.append(mapMetrics(cve: cve,metrics: metrics))
                    break
                }
            case .MetricsV31:
                if (cve.metrics?.cvssMetricV31 != nil) {
                    display.append(mapMetrics(cve: cve,metrics: metrics))
                    break
                }
            }
        }
        return display
    }
    
    private func mapMetrics(cve: Cve,metrics:MetricsVersion)->DisplayMetric {
        let tmpMetrics = metrics
        var displayMetrics: DisplayMetric
        //TODO: For metrics in metrics and else use other as fallback
        switch tmpMetrics {
        case .MetricsV31:
            let metrics = cve.metrics?.cvssMetricV31![0].cvssData
            displayMetrics = DisplayMetric(cveID: cve.id,
                                           version: metrics!.version,
                                           description: cve.descriptions[0].value,
                                           vectorString: metrics!.vectorString,
                                           attackVector: metrics!.attackVector,
                                           attackComplexity: metrics!.attackComplexity,
                                           privilegesRequired: metrics!.privilegesRequired,
                                           userInteraction: metrics!.userInteraction,
                                           scope: metrics!.scope,
                                           confidentialityImpact: metrics!.confidentialityImpact,
                                           integrityImpact: metrics!.integrityImpact,
                                           availabilityImpact: metrics!.availabilityImpact,
                                           baseScore: metrics!.baseScore,
                                           baseSeverity: metrics!.baseSeverity,
                                           exploitabilityScore: cve.metrics?.cvssMetricV31![0].exploitabilityScore,
                                           impactScore: cve.metrics?.cvssMetricV31![0].impactScore
            )
            return displayMetrics
        case .MetricsV30:
            let metrics = cve.metrics?.cvssMetricV30![0].cvssData
            displayMetrics = DisplayMetric(cveID: cve.id,
                                           version: metrics!.version,
                                           description: cve.descriptions[0].value,
                                           vectorString: metrics!.vectorString,
                                           attackVector: metrics!.attackVector,
                                           attackComplexity: metrics!.attackComplexity,
                                           privilegesRequired: metrics!.privilegesRequired,
                                           userInteraction: metrics!.userInteraction,
                                           scope: metrics!.scope,
                                           confidentialityImpact: metrics!.confidentialityImpact,
                                           integrityImpact: metrics!.integrityImpact,
                                           availabilityImpact: metrics!.availabilityImpact,
                                           baseScore: metrics!.baseScore,
                                           baseSeverity: metrics!.baseSeverity,
                                           exploitabilityScore: cve.metrics?.cvssMetricV30![0].exploitabilityScore,
                                           impactScore: cve.metrics?.cvssMetricV30![0].impactScore
            )
            return displayMetrics
        case .MetricsV2:
            let metrics = cve.metrics?.cvssMetricV2![0].cvssData
            let tmp = cve.metrics?.cvssMetricV2![0]
            displayMetrics = DisplayMetric(cveID: cve.id,
                                           version: metrics!.version,
                                           description: cve.descriptions[0].value,
                                           vectorString: metrics!.vectorString,
                                           attackVector: "",
                                           attackComplexity: "",
                                           privilegesRequired: "",
                                           userInteraction: "",
                                           scope: "",
                                           confidentialityImpact: metrics!.confidentialityImpact,
                                           integrityImpact: metrics!.integrityImpact,
                                           availabilityImpact: metrics!.availabilityImpact,
                                           baseScore: metrics!.baseScore,
                                           baseSeverity: tmp?.baseSeverity,
                                           exploitabilityScore: cve.metrics?.cvssMetricV2![0].exploitabilityScore,
                                           impactScore: cve.metrics?.cvssMetricV2![0].impactScore
            )
            return displayMetrics
            
        }
    }
}
