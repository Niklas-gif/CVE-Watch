//
//  NetworkClerk.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 16.11.23.
//

import Foundation

class NetworkClerk {
    
    private let CVE_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    private let CVE_URL_ID = "https://services.nvd.nist.gov/rest/json/cves/2.0?CVEId="
    private let CVE_URL_DATE = "?resultsPerPage=20&pubStartDate="
    private let CVE_KEYWORD = "?resultsPerPage=200&keywordSearch="
    
    private func fetch(api: String) async -> NVDResponse! {
        let request = URLRequest(url: URL(string:api)!)
        var (data, response): (Data, URLResponse)
        
        do {
            (data, response) = try await URLSession.shared.data(for: request)
        } catch {
            print("request failed")
            return nil
        }
        
        guard(response as? HTTPURLResponse)?.statusCode == 200 else {
            print(response)
            return nil
        }
        let json = convertJSON(data: data)
        return json
    }
    
    private func convertJSON(data: Data) ->NVDResponse! {
        do {
           return try JSONDecoder().decode(NVDResponse.self, from: data)
        } catch {
            print(error)
            return nil
        }
    }
    
    
    //Fetch by ID
    
    func fetchByID(cveID: String) async -> NVDResponse! {
        let url = CVE_URL_ID + cveID
        return await fetch(api: url)
    }
    
    //Fetch by Description
    func fetchByDescription(description: String) async -> NVDResponse! {
        let url = CVE_URL + CVE_KEYWORD + description
        return await fetch(api: url)
    }
    
    //Fetch by Date
    
    /*func fetchByDate() async -> NVDResponse! {
        let url = CVE_URL + "?resultsPerPage=20&keywordSearch=MacOs&keywordExactMatch&pubStartDate=2023-10-01T00:00:00.000&pubEndDate=2023-11-16T00:00:00.000"
        return await fetch(api: url)
    }*/
    
    func fetchByDate(startDate: String,endDate: String) async -> NVDResponse! {
        let url = CVE_URL + CVE_URL_DATE + "\(startDate)T00:00:00.000&pubEndDate=\(endDate)T00:00:00.000"
        return await fetch(api: url)
    }
    
}
