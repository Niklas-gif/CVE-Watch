//
//  PersistentModel.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 21.11.23.
//

import Foundation
import Combine

class ModelInterface {
    fileprivate var APPDATA = "appData.json"
    fileprivate var appModelData = AppDatabase.sharedInstance
    fileprivate var appModelObserver = AppObserver.sharedInstance
    
    func add(cve: Cve) {
        appCves.append(cve)
    }
    
    func save() {
        var userDir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
        userDir = userDir.appendingPathComponent(APPDATA)
        var encodedData =  try! JSONEncoder().encode(ModelInterface().appModelData.container)
        try! encodedData.write(to: userDir)
        //print(try! Data(contentsOf: userDir)[0].words)
    }
    
    func load() {
        var userDir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
        userDir = userDir.appendingPathComponent(APPDATA)
        let rawData = try! Data(contentsOf: userDir)
        ModelInterface().appModelData.container = try! JSONDecoder().decode(AppContainer.self, from: rawData)
        print(ModelInterface().appModelData.container.appCves)
    }
    
    func deleted() {
        // TODO: Implement
    }
    
    var appCves : [Cve] {
        get {
            return appModelData.appCves
        } set(newCves) {
            appModelData.appCves = newCves
        }
    }
}

fileprivate class AppDatabase: ObservableObject {
    static var sharedInstance = AppDatabase()
    fileprivate var container = AppContainer()
    
    var appCves : [Cve] {
        get {
            return container.appCves
        }
        set (newAppCves)
        {
            container.appCves = newAppCves
            
        }
    }
    private init() {}
}

fileprivate struct AppContainer : Codable {
    private var _appCves : [Cve]?
    var appCves : [Cve] {get {return _appCves ?? []} set {_appCves = newValue}}
}

fileprivate class AppObserver : ObservableObject {
    static var sharedInstance = AppObserver()
    @Published var appModelChanged = false
}
