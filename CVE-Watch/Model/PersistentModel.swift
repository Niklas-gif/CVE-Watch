//
//  PersistentModel.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 21.11.23.
//

import Foundation
import Combine

class ModelInterface {
    fileprivate var APPDATA = "appData.json"
    fileprivate var USERSETTINGS = "settings.json"
    fileprivate var appModelData = AppDatabase.sharedInstance
    fileprivate var settingsModelData = SettingsDatabase.sharedInstance
    fileprivate var appModelObserver = AppObserver.sharedInstance
    
    private func getUserDirectory(dirName: String) ->URL {
        return FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0].appendingPathComponent(dirName)
    }
    
    func add(cve: Cve) {
        appModelData.appCves.append(cve)
    }
    
    func save() {
        let url = getUserDirectory(dirName: APPDATA)
        let encodeData = try! JSONEncoder().encode(appModelData.container)
        try! encodeData.write(to: url) // TODO: error handling!
    }
    
    func load() {
        let url = getUserDirectory(dirName: APPDATA)
        if let rawData = try? Data(contentsOf: url) {
            appModelData.container = try! JSONDecoder().decode(AppContainer.self, from:rawData)
        }
        
    }
    
    func delete() {
        appModelData.appCves = []
        save()
    }
    
    func getCveData() -> [Cve] {
        return appModelData.appCves
    }
    
    
    func saveSettings() {
        let url = getUserDirectory(dirName: USERSETTINGS)
        let encodeData = try! JSONEncoder().encode(settingsModelData.container)
        try! encodeData.write(to: url)
        
    }
    
    func loadSettings() {
        let url = getUserDirectory(dirName: USERSETTINGS)
        if let rawData = try? Data(contentsOf: url) {
            settingsModelData.container = try! JSONDecoder().decode(SettingsContainer.self, from: rawData)
        }
    }
}

///Appdata

fileprivate class AppDatabase: ObservableObject {
    fileprivate static var sharedInstance = AppDatabase()
    fileprivate var container = AppContainer()
    private init() {}
    
    var appCves : [Cve] {
        get {
            return container.appCves
        }
        set (newAppCves)
        {
            container.appCves = newAppCves
        }
    }
}

fileprivate struct AppContainer: Codable {
    private var _appCves : [Cve]?
    var appCves : [Cve] {get {return _appCves ?? []} set {_appCves = newValue}}
}

fileprivate class AppObserver : ObservableObject {
    static var sharedInstance = AppObserver()
    @Published var appModelChanged = false
}

///Settings

fileprivate class SettingsDatabase: ObservableObject {
    fileprivate static var sharedInstance = SettingsDatabase()
    fileprivate var container = SettingsContainer()
    private init() {}
    
    var metricsVersion : MetricsVersion {
        get {
            return container.metricsVersion
        }
        
        set(newValue) {
            container.metricsVersion = newValue
        }
    }
}

fileprivate struct SettingsContainer: Codable {
    var metricsVersion : MetricsVersion = MetricsVersion.MetricsV2
}
