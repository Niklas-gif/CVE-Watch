//
//  CVEInfoView.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 14.11.23.
//

import SwiftUI

struct CVEInfoView: View {
    @Environment(\.colorScheme) private var colorScheme
    @ObservedObject var vm = CVEInfoVM()
    @State var searchText = ""
    @State var searchIsVisible = false
    var body: some View {
        NavigationStack {
            ZStack {
                VStack {
                    VStack(alignment:.leading) {
                        HStack{
                            Text("Overview").padding(.horizontal).font(.largeTitle).bold()
                            Spacer()
                            Button(action:{
                                withAnimation(.easeInOut(duration: 0.5)) {
                                    searchIsVisible.toggle()
                                }
                            }
                                   ,label: {Image(
                                    systemName:  "magnifyingglass")
                                   .foregroundStyle(.appLightBlue)
                                   .font(.system(size: 32))
                                   .scaleEffect(searchIsVisible ? 0.75 : 1)
                                   .symbolEffect(.bounce, value: searchIsVisible)
                            })
                        }.padding()
                        if searchIsVisible {
                            Spacer()
                            TextField(
                                "CVE-Search", text: $searchText).textFieldStyle(.roundedBorder).padding()
                            HStack(alignment: .center,spacing: 20) {
                                Spacer()
                                Group(){
                                    Button("Fetch") {
                                        vm.updateList(userInput: searchText)
                                    }
                                    Button("Delete") {
                                        vm.TEST_deleteAll()
                                    }
                                    Button("Update") {
                                        vm.update()
                                    }
                                }.padding(10).foregroundStyle(.foreground).background(.gray.opacity(0.3)).shadow(color:Color.appLightBlue,radius: /*@START_MENU_TOKEN@*/10/*@END_MENU_TOKEN@*/).clipShape(.capsule)
                                Spacer()
                            }
                        }
                        Spacer()
                        List {
                            ForEach($vm.cves) {data in
                                ListItemView(displayData: data)
                                
                            }
                        }.background(LinearGradient(
                            gradient: Gradient(colors: [Color.black.opacity(0.8),Color.black.opacity(0.5), Color.appBlue]),
                                   startPoint: .top,
                                   endPoint: .bottom
                               ))
                        .listRowSpacing(10)
                        .scrollContentBackground(colorScheme == .dark ? .hidden : .visible)
                    }.onAppear(perform: {
                        vm.update()
                    })
                   
                }
            }
        }
    }
}



#Preview {
    CVEInfoView()
}

struct CVEListItem: View {
    @Binding var displayData: Cve
    var body: some View {
        HStack() {
            Text("\(displayData.metrics?.cvssMetricV31?[0].cvssData.baseScore ?? 0.0, specifier: "%.2f")").padding(20).background(.red).scaledToFit().clipShape(Circle())
            Spacer()
            Text(displayData.id)
                .font(.title3)
                .bold()
        }
        .padding()
        .clipShape(.buttonBorder)
    }
}

struct ListItemView: View {
    @Binding var displayData: Cve
    var body: some View {
        
        NavigationLink(destination: CVEDetailsView(displayData: $displayData)) {
            HStack() {
                Text("\(displayData.metrics?.cvssMetricV31?[0].cvssData.baseScore ?? 0.0, specifier: "%.2f")")
                    .padding(20)
                    .background(.red)
                    
                    .scaledToFit()
                    .clipShape(Circle())
                    .shadow(color: .red, radius: 10)
                Spacer()
                Text(displayData.id)
                    .font(.title3)
                    .bold()
            }
            .padding()
            .clipShape(.buttonBorder)
            
        }
        
        .listRowSeparator(.hidden)
        .listRowBackground(Color.black.opacity(0.8).shadow(color: Color.gray,radius: 1))
        
    }
}
