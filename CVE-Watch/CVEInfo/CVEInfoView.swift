//
//  CVEInfoView.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 14.11.23.
//

import SwiftUI

struct CVEInfoView: View {
    @Environment(\.colorScheme) private var colorScheme
    @ObservedObject var vm = CVEInfoVM()
    @State var searchText = ""
    @State var searchIsVisible = false
    var body: some View {
        NavigationStack {
            ZStack {
                Color.cveBackground.ignoresSafeArea()
                VStack {
                    VStack(alignment:.leading) {
                        ToolbarDemo(searchIsVisible: $searchIsVisible,
                                    searchText: $searchText, vm: vm)
                        Spacer()
                        List {
                            ForEach($vm.filteredData) {data in
                                ListItemView(displayData: data,vm: vm)
                                
                            }.onChange(of: searchText, {
                                vm.filterByDescription(searchText: searchText)
                            })
                        }
                        .refreshable {
                            vm.update()
                    }
                        .listRowSpacing(10)
                        .scrollContentBackground(colorScheme == .dark ? .hidden : .visible)
                    }
                    .onAppear(perform: {
                        vm.update()
                    })
                }.navigationTitle("Overview").navigationBarHidden(true)
            } //TODO: Navtitle is hidden for now
        }
    }
}


#Preview {
    CVEInfoView(vm: CVEInfoVM())
}

struct ListItemView: View {
    @Binding var displayData: DisplayMetric
    @ObservedObject var vm: CVEInfoVM
    var body: some View {
        NavigationLink(destination: CVEDetailsView(displayData: $displayData)) {
            HStack() {
                Text(displayData.cveID ?? "")
                    .font(.title3)
                    .bold()
                Spacer()
                //TODO: Metrics Version
                VStack {
                    SeverityScoreView(baseScore: $displayData.baseScore )
                    Text("Metrics: V\(displayData.version ?? "Undefined")")
                        .font(.caption2)
                }
            }
            .padding()
            .clipShape(.buttonBorder)
        }
        .listRowSeparator(.hidden)
        .listRowBackground(Color.primary.colorInvert()
            .opacity(0.8)
            .shadow(color: Color.gray,radius: 1))
        
    }
}

struct ToolbarDemo: View {
    @Binding var searchIsVisible: Bool
    @Binding var searchText: String
    @State var isElementVisible = false
    @ObservedObject var vm: CVEInfoVM
    var body: some View {
        HStack{
            Text("Overview")
                .padding(.horizontal)
                .font(.largeTitle)
                .bold()
            Spacer()
            Button(action:{
                withAnimation(.easeInOut(duration: 0.5)) {
                    searchIsVisible.toggle()
                }
            }
                   ,label: {Image(
                    systemName:  "line.3.horizontal.decrease.circle")
                   .foregroundStyle(.appLightBlue)
                   .font(.system(size: 32))
                   .scaleEffect(searchIsVisible ? 0.75 : 1)
                   .symbolEffect(.bounce, value: searchIsVisible)
                   .padding(.horizontal)
            })
        }.padding(5).gesture (
            DragGesture()
                .onChanged { value in
                    if value.translation.height > 0 {
                        // Dragging down
                        withAnimation {
                            searchIsVisible = true
                        }
                    }
                    else if value.translation.height < 0 {
                        // Dragging down
                        withAnimation {
                            searchIsVisible = false
                        }
                    }
                }
        )
        if searchIsVisible {
            VStack {
                TextField (
                    "CVE-Search", text: $searchText)
                .textFieldStyle(.roundedBorder)
                .padding()
                ScrollView(.horizontal) {
                    HStack(alignment: .center,spacing: 20) {
                      
                        Group() {
                            Button(action: {
                                vm.sortByPublishingDate()
                                vm.isNewest.toggle()
                            }, label: {
                                HStack {
                                    Text(vm.isNewest ? "Oldest" : "Newest")
                                    Image(systemName: "clock")
                                        .symbolEffect(.bounce, value: vm.isNewest)
                                }
                            })
                            Button(action: {
                                vm.sortBySeverity()
                                vm.severityIsHigh.toggle()
                            }, label: {
                                HStack {
                                    Text("Severity")
                                    Image(systemName: vm.severityIsHigh ? "arrow.up" : "arrow.down")
                                        .symbolEffect(.bounce, value: vm.severityIsHigh)
                                }
                            })
                            Button(action: {
                                vm.sortByID()
                                vm.idIsHigh.toggle()
                            }, label: {
                                HStack {
                                    Text("CVE-ID")
                                    Image(systemName: vm.idIsHigh ? "arrow.up" : "arrow.down")
                                        .symbolEffect(.bounce, value: vm.idIsHigh)
                                }
                            })
                        }.padding(10)
                            .foregroundStyle(Color.white)
                            .fontWeight(.bold)
                            .background(Color.black)
                            .clipShape(.buttonBorder)
                       
                    }
                }
            }
        }
    }
}
