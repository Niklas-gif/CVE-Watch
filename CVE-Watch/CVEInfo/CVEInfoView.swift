//
//  CVEInfoView.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 14.11.23.
//

import SwiftUI

struct CVEInfoView: View {
    @Environment(\.colorScheme) private var colorScheme
    @ObservedObject var vm = CVEInfoVM()
    @State var searchText = ""
    @State var searchIsVisible = false
    var body: some View {
        NavigationStack {
            //ZStack {
            /*LinearGradient(
             gradient: Gradient(colors: [Color.appBlue.opacity(0.8),Color.appBlue.opacity(0.5), Color.appLightBlue]),
             startPoint: .top,
             endPoint: .bottom
             )*/
            VStack {
                VStack(alignment:.leading) {
                    HStack{
                        Text("Overview").padding(.horizontal).font(.largeTitle).bold()
                        Spacer()
                        Button(action:{
                            withAnimation(.easeInOut(duration: 0.5)) {
                                searchIsVisible.toggle()
                            }
                        }
                               ,label: {Image(
                                systemName:  "magnifyingglass")
                               .foregroundStyle(.appLightBlue)
                               .font(.system(size: 32))
                               .scaleEffect(searchIsVisible ? 0.75 : 1)
                               .symbolEffect(.bounce, value: searchIsVisible)
                               .padding(.horizontal)
                        })
                    }.padding(5)
                    if searchIsVisible {
                        Spacer()
                        TextField(
                            "CVE-Search", text: $searchText).textFieldStyle(.roundedBorder).padding()
                        HStack(alignment: .center,spacing: 20) {
                            Spacer()
                            Group(){
                                Button("Fetch") {
                                    vm.updateList(userInput: searchText)
                                }
                                Button("Delete") {
                                    vm.TEST_deleteAll()
                                }
                                Button("Update") {
                                    vm.update()
                                }
                            }.padding(10).foregroundStyle(.foreground).background(.gray.opacity(0.3)).shadow(color:Color.appLightBlue,radius: 10).clipShape(.capsule)
                            Spacer()
                        }
                    }
                    Spacer()
                    List {
                        ForEach($vm.cves) {data in
                            ListItemView(displayData: data,vm: vm)
                            
                        }
                    }.background(LinearGradient(
                        gradient: Gradient(colors: [Color.black.opacity(0.8),Color.black.opacity(0.5), Color.appLightBlue.opacity(0.3)]),
                        startPoint: .top,
                        endPoint: .bottom
                    ))
                    .listRowSpacing(10)
                    .scrollContentBackground(colorScheme == .dark ? .hidden : .visible)
                }.onAppear(perform: {
                    vm.update()
                })
            }
        }
        
    }
}


#Preview {
    CVEInfoView()
}

struct ListItemView: View {
    @Binding var displayData: Cve
    @ObservedObject var vm: CVEInfoVM
    var body: some View {
        NavigationLink(destination: CVEDetailsView(displayData: $displayData)) {
            HStack() {
                Text(displayData.id)
                    .font(.title3)
                    .bold()
                Spacer()
                Text("\(displayData.metrics?.cvssMetricV2?[0].cvssData.baseScore ?? 0.0, specifier: "%.2f")")
                    .fontWeight(.semibold)
                    .padding(.vertical,5)
                    .padding(.horizontal,10)
                    .background(vm.getSeverityColor(baseScore: displayData.metrics?.cvssMetricV2?[0].cvssData.baseScore ?? 0.0))
                    .scaledToFit()
                    .clipShape(Capsule())
                    .shadow(color: vm.getSeverityColor(baseScore: displayData.metrics?.cvssMetricV2?[0].cvssData.baseScore ?? 0.0), radius: 7.5)
            }
            .padding()
            .clipShape(.buttonBorder)
        }
        .listRowSeparator(.hidden)
        .listRowBackground(Color.primary.colorInvert().opacity(0.8).shadow(color: Color.gray,radius: 1))
        
    }
}
