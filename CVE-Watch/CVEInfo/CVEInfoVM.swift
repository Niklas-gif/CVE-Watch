//
//  CVEInfoVM.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 16.11.23.
//

import Foundation

class CVEInfoVM: ObservableObject {
    @Published var uiTestdata = testData
    @Published var cves: [Cve] = []
    
    func updateList(userInput: String) {
        Task {
            let fetch = await NetworkClerk().fetch(api: userInput)
            DispatchQueue.main.async {
                for vulnerability in fetch?.vulnerabilities ?? [] {
                    //self.testAppend(vulnerability: vulnerability)
                    self.storeCve(vulnerability: vulnerability)
                    
                }
            }
        }
        
    }
    
    func storeCve(vulnerability: Vulnerability?) {
        if(vulnerability?.cve != nil) {
            cves.append(vulnerability!.cve)
        }
    }
    
    func testAppend(vulnerability: Vulnerability?) {
        let cve = vulnerability
        let baseScore: Double
        if(cve?.cve.metrics?.cvssMetricV31 != nil){
            baseScore = cve?.cve.metrics?.cvssMetricV31![0].cvssData.baseScore ?? 0.0
        } else {
            baseScore = cve?.cve.metrics?.cvssMetricV2?[0].cvssData.baseScore ?? 0.0
        }
        let test = CVETestData(
            CVEID: cve?.cve.id ?? "", // Provide a default value in case cve?.id is nil
            baseScore: baseScore , // Provide a default value for baseScore
            attackVector: "", // Provide a default value for attackVector
            description: ""
            
        )
        //print(cve?.metrics)
        //print(cve?.metrics?.cvssMetricV2[0].cvssData.baseScore)
        uiTestdata.append(test)
        
    }
}
