//
//  CVEInfoVM.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 16.11.23.
//

import Foundation
import Combine
import SwiftUI

class CVEInfoVM: ObservableObject {
    @Published var cves: [Cve] = []
    var modelInterface = ModelInterface()
    
    fileprivate var subscription : AnyCancellable! = nil
    
    func getSeverityColor(baseScore: Double)-> Color {
        if (baseScore < 3) {
            return .green
        }
        if (baseScore >= 3 && baseScore < 7) {
            return .orange
        }
        if (baseScore >= 7) {
            return .red
        }
        return .gray
    }
    
    func fetchByID(userInput: String) {
        Task {
            let fetch = await NetworkClerk().fetchByID(cveID: userInput)
            DispatchQueue.main.async {
                for vulnerability in fetch?.vulnerabilities ?? [] {
                    self.storeCve(vulnerability: vulnerability)
                    //TODO: Check if cve alreafy exsists
                    self.modelInterface.save()
                }
            }
        }
        
    }
    
    func autoFetch() {
        Task {
            let fetch = await NetworkClerk().fetchByDate()
            DispatchQueue.main.async {
                for vulnerability in fetch?.vulnerabilities ?? [] {
                    self.storeCve(vulnerability: vulnerability)
                    //TODO: Check if cve alreafy exsists
                    self.modelInterface.save()
                }
            }
        }
    }
    
    func update() {
        cves = modelInterface.getCveData()
    }
    
    func storeCve(vulnerability: Vulnerability?) {
        if(vulnerability?.cve != nil) {
            modelInterface.add(cve: vulnerability!.cve)
            cves = modelInterface.getCveData()
        }
    }
    
    func TEST_deleteAll() {
        modelInterface.delete()
        cves = modelInterface.getCveData()
    }
    
    
}
