//
//  CVEInfoVM.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 16.11.23.
//

import Foundation
import Combine
import SwiftUI

class CVEInfoVM: ObservableObject {
    @Published var cves: [Cve] = []
    @Published var displayData: [DisplayMetric] = []
    @Published var metricsVersion: MetricsVersion = UserSettings().metricsVersion
    @Published var isHigh = true
    private let modelInterface = ModelInterface()

    
    fileprivate var subscription: AnyCancellable! = nil
    
    private func handleMetrics(userMetrics:MetricsVersion) {
        displayData = MetricsHelper().handleMetricsVersion(metrics: metricsVersion, cves: modelInterface.getCveData())
    }
    
    //High to Low
    func sortBySeverity() {
        if (isHigh) {
            displayData = displayData.sorted(by: {$0.baseScore ?? 0.0 > $1.baseScore ?? 0.0})
        } else {
            displayData = displayData.sorted(by: {$0.baseScore ?? 0.0 < $1.baseScore ?? 0.0})
        }
    }
    
    func update() {
        metricsVersion = UserSettings().metricsVersion //<-- TODO: Check if this might cause problems later!
        cves = modelInterface.getCveData()
        handleMetrics(userMetrics: metricsVersion)
    }
    
    func getSeverityColor(baseScore: Double)-> Color {
        if (baseScore < 3) {
            return .green
        }
        if (baseScore >= 3 && baseScore < 7) {
            return .orange
        }
        if (baseScore >= 7) {
            return .red
        }
        return .gray
    }
    
    func fetchByID(userInput: String) {
        if(userInput != "") {
            Task {
                let fetch = await NetworkClerk().fetchByID(cveID: userInput)
                DispatchQueue.main.async {
                    for vulnerability in fetch?.vulnerabilities ?? [] {
                        self.storeCve(vulnerability: vulnerability)
                        //TODO: Check if cve alreafy exsists
                        self.modelInterface.save()
                        self.update()
                    }
                }
            }
        }
    }
    
    func autoFetch() {
        Task {
            //TODO: Replace hardcoded values
            let fetch = await NetworkClerk().fetchByDate(startDate: dateConverter(day: "01", month: "01", year: "2024"), endDate: dateConverter())
            DispatchQueue.main.async {
                for vulnerability in fetch?.vulnerabilities ?? [] {
                    self.storeCve(vulnerability: vulnerability)
                    //TODO: Check if cve alreafy exsists
                    self.modelInterface.save()
                    self.update()
                }
            }
        }
    }
    
   private func storeCve(vulnerability: Vulnerability?) {
        if(vulnerability?.cve != nil) {
            modelInterface.add(cve: vulnerability!.cve)
            cves = modelInterface.getCveData()
            self.update()
        }
    }
    
    func delete() {
        modelInterface.delete()
        update()
    }
    
    
}
