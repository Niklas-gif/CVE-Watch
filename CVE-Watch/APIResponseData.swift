//
//  APIResponseData.swift
//  CVE-Watch
//
//  Created by Niklas Demel on 14.11.23.
//

import Foundation

// MARK: - CVENVDResponse
struct NVDResponse: Codable {
    var resultsPerPage: Int
    var startIndex: Int
    var totalResults: Int
    var format: String
    var version: String
    var timestamp: String
    var vulnerabilities: [Vulnerability]

    enum CodingKeys: String, CodingKey {
        case resultsPerPage = "resultsPerPage"
        case startIndex = "startIndex"
        case totalResults = "totalResults"
        case format = "format"
        case version = "version"
        case timestamp = "timestamp"
        case vulnerabilities = "vulnerabilities"
    }
}

// MARK: - Vulnerability
struct Vulnerability: Codable {
    var cve: Cve
    var metrics: Metrics?

    enum CodingKeys: String, CodingKey {
        case cve = "cve"
        case metrics = "metrics"
    }
}

// MARK: - Cve
struct Cve: Codable {
    var id: String
    var sourceIdentifier: String
    var published: String
    var lastModified: String
    var vulnStatus: String
    var descriptions: [Description]

    enum CodingKeys: String, CodingKey {
        case id = "id"
        case sourceIdentifier = "sourceIdentifier"
        case published = "published"
        case lastModified = "lastModified"
        case vulnStatus = "vulnStatus"
        case descriptions = "descriptions"
    }
}

struct Description: Codable {
    var lang: String
    var value: String
    
    enum CodingKeys: String, CodingKey {
        case lang = "lang"
        case value = "value"
    }
}

// MARK: - Metrics
struct Metrics: Codable {
    var cvssMetricV31: [CvssMetricV31]
    var cvssMetricV2: [CvssMetricV2]

    enum CodingKeys: String, CodingKey {
        case cvssMetricV31 = "cvssMetricV31"
        case cvssMetricV2 = "cvssMetricV2"
    }
}

// MARK: - CvssMetricV2
struct CvssMetricV2: Codable {
    var source: String
    var type: String
    var cvssData: CvssMetricV2CvssData
    var baseSeverity: String
    var exploitabilityScore: Double
    var impactScore: Double
    var acInsufInfo: Bool
    var obtainAllPrivilege: Bool
    var obtainUserPrivilege: Bool
    var obtainOtherPrivilege: Bool
    var userInteractionRequired: Bool

    enum CodingKeys: String, CodingKey {
        case source = "source"
        case type = "type"
        case cvssData = "cvssData"
        case baseSeverity = "baseSeverity"
        case exploitabilityScore = "exploitabilityScore"
        case impactScore = "impactScore"
        case acInsufInfo = "acInsufInfo"
        case obtainAllPrivilege = "obtainAllPrivilege"
        case obtainUserPrivilege = "obtainUserPrivilege"
        case obtainOtherPrivilege = "obtainOtherPrivilege"
        case userInteractionRequired = "userInteractionRequired"
    }
}

// MARK: - CvssMetricV2CvssData
struct CvssMetricV2CvssData: Codable {
    var version: String
    var vectorString: String
    var accessVector: String
    var accessComplexity: String
    var authentication: String
    var confidentialityImpact: String
    var integrityImpact: String
    var availabilityImpact: String
    var baseScore: Double

    enum CodingKeys: String, CodingKey {
        case version = "version"
        case vectorString = "vectorString"
        case accessVector = "accessVector"
        case accessComplexity = "accessComplexity"
        case authentication = "authentication"
        case confidentialityImpact = "confidentialityImpact"
        case integrityImpact = "integrityImpact"
        case availabilityImpact = "availabilityImpact"
        case baseScore = "baseScore"
    }
}

// MARK: - CvssMetricV31
struct CvssMetricV31: Codable {
    var source: String
    var type: String
    var cvssData: CvssMetricV31CvssData
    var exploitabilityScore: Double
    var impactScore: Double

    enum CodingKeys: String, CodingKey {
        case source = "source"
        case type = "type"
        case cvssData = "cvssData"
        case exploitabilityScore = "exploitabilityScore"
        case impactScore = "impactScore"
    }
}

// MARK: - CvssMetricV31CvssData
struct CvssMetricV31CvssData: Codable {
    var version: String
    var vectorString: String
    var attackVector: String
    var attackComplexity: String
    var privilegesRequired: String
    var userInteraction: String
    var scope: String
    var confidentialityImpact: String
    var integrityImpact: String
    var availabilityImpact: String
    var baseScore: Double
    var baseSeverity: String

    enum CodingKeys: String, CodingKey {
        case version = "version"
        case vectorString = "vectorString"
        case attackVector = "attackVector"
        case attackComplexity = "attackComplexity"
        case privilegesRequired = "privilegesRequired"
        case userInteraction = "userInteraction"
        case scope = "scope"
        case confidentialityImpact = "confidentialityImpact"
        case integrityImpact = "integrityImpact"
        case availabilityImpact = "availabilityImpact"
        case baseScore = "baseScore"
        case baseSeverity = "baseSeverity"
    }
}
